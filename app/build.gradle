buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://maven.fabric.io/public' }
    }
    dependencies {

    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.ofg.uptodate'
//apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'realm-android'
apply from: "$rootDir/dependencies.gradle"
apply from: "$rootDir/keystore.gradle"

apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/findbugs.gradle"
apply from: "$rootDir/gradle/pmd.gradle"

check.dependsOn('checkstyle')
check.dependsOn('findbugs')
check.dependsOn('pmd')
check.dependsOn('lint')

repositories {
    maven { url 'https://clojars.org/repo/' }
    maven { url 'https://maven.fabric.io/public' }
    maven { url "https://jitpack.io" }
}

android {

    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {

        applicationId = versions.packagename

        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk

        versionCode buildVersionCode()
        versionName buildVersionName()

        testApplicationId "${versions.packagename}.tests"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

//        jackOptions {
//            enabled false
//        }

        // Enabling vector drawables support.
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/$keystore.debugKeystore")
            storePassword "$keystore.debugStorePass"
            keyAlias "$keystore.debugAliase"
            keyPassword "$keystore.debugKeyPass"
        }
        release {
            storeFile file("../keystore/$keystore.releaseKeystore")
            storePassword "$keystore.releaseStorePass"
            keyAlias "$keystore.releaseAliase"
            keyPassword "$keystore.releaseKeyPass"
        }
    }

    buildTypes {
        debug {
            resValue "string", "app_name", "(D)${versions.appname}"
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
            debuggable true
            signingConfig signingConfigs.debug
            testCoverageEnabled = false
        }
        release {
            resValue "string", "app_name", "${versions.appname}"
            minifyEnabled false
            shrinkResources false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-rules.pro')
            signingConfig signingConfigs.release
        }
    }

    ////////////////////////////////////////////////////////
    // Separate resources by corresponding screen folders //
    ////////////////////////////////////////////////////////
    sourceSets {

        // Unit tests live in src/unitTest.
        test.java.srcDir 'src/mockTest/java'

        // Resources
        main {
            res.srcDirs = [
                    'src/main/res'
            ]
            file('src/main/res-screen')
                    .listFiles()
                    .each { res.srcDirs += it.path }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        warning 'InvalidPackage'
    }

    buildToolsVersion '26.0.2'
}

dependencies {
//    compile fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':liquidview')
    // Supports
    compile "com.android.support:design:${versions.supportLibrary}"
    compile "com.android.support:recyclerview-v7:${versions.supportLibrary}"
    compile "com.android.support:support-annotations:${versions.supportLibrary}"
    compile "com.android.support:cardview-v7:${versions.supportLibrary}"
    compile "com.android.support:support-fragment:${versions.supportLibrary}"
    compile "com.android.support:percent:${versions.supportLibrary}"

    // DI
    compile "com.google.dagger:dagger:${versions.dagger}"
    annotationProcessor "com.google.dagger:dagger-compiler:${versions.dagger}"
    compileOnly "javax.annotation:jsr250-api:1.0"

    // IcePick
    compile "frankiesardo:icepick:${versions.icepick}"
    annotationProcessor "frankiesardo:icepick-processor:${versions.icepick}"

    // Data Base

    // Http
    compile "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    compile "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"
    compile "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    compile "com.squareup.retrofit2:converter-gson:${versions.retrofit}"
    compile "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile "com.github.bumptech.glide:glide:${versions.glide}"


    // Ui
    compile "com.jakewharton:butterknife:8.8.1"
    annotationProcessor "com.jakewharton:butterknife-compiler:8.8.1"
    compile 'com.github.princeparadoxes:recyclerbindableadapter:1.3'
    compile 'com.livetyping:cannyviewanimator:0.8'
    compile 'com.yarolegovich:discrete-scrollview:1.1.4'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    compile 'com.diogobernardino:williamchart:2.5.0'
    compile "com.daimajia.swipelayout:library:1.2.0@aar"

    compile "com.jakewharton.timber:timber:4.5.1"
    //rx
    compile "io.reactivex.rxjava2:rxjava:${versions.rxjava}"
    compile "io.reactivex.rxjava2:rxandroid:${versions.rxandroid}"

    // Debug
    debugCompile "com.facebook.stetho:stetho:${versions.stetho}"
    debugCompile "com.facebook.stetho:stetho-okhttp3:${versions.stetho}"
    debugCompile 'io.palaima.debugdrawer:debugdrawer:0.7.0'
    releaseCompile 'io.palaima.debugdrawer:debugdrawer-no-op:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-commons:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-actions:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-okhttp:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-okhttp3:0.7.0'
    debugCompile 'io.palaima.debugdrawer:debugdrawer-glide:0.7.0'
    debugCompile "com.squareup.leakcanary:leakcanary-android:${versions.leakCanary}"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakCanary}"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakCanary}"
    debugCompile "com.squareup.retrofit2:retrofit-mock:${versions.retrofit}"

    // Unit Tests
    androidTestCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-library:1.4-atlassian-1"
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile "com.google.truth:truth:0.28"


    androidTestCompile("com.android.support.test.espresso:espresso-core:2.2.2", {
        exclude group: "com.android.support", module: "support-annotations"
    })
}

//dexcount {
//    format = "list"
//    includeClasses = false
//    includeFieldCount = true
//    includeTotalMethodCount = false
//    orderByMethodCount = false
//    verbose = false
//    maxTreeDepth = Integer.MAX_VALUE
//    teamCityIntegration = false
//    teamCitySlug = null
//    runOnEachAssemble = true
//}

///////////////////////////////////////////////////
///////////////// Change apk name /////////////////
///////////////////////////////////////////////////
android.applicationVariants.all { variant ->
//    for (output in variant.outputs) {
//        def outputFile = output.outputFile
//        if (outputFile != null && outputFile.name.endsWith('.apk')) {
//            def fileName = "${versions.apkname}-${output.name}.apk"
//            output.outputFile = new File(outputFile.parent, fileName)
//        }
//    }
}

///////////////////////////////////////////////////
///////////// Print build finish time /////////////
///////////////////////////////////////////////////
gradle.buildFinished { buildResult ->
    def buildFinishDate = new Date()
    def formattedDate = buildFinishDate.format('yyyy-MM-dd HH:mm:ss')
    println "Build finished: ${formattedDate}"
}
